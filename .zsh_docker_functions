# ~/.zsh_docker_functions
# Source this file in ~/.zshrc

# ==============================================================================
# Helper Functions
# ==============================================================================


# =============================================================================
# DOCKER ALIASES
# =============================================================================

# Basic container operations
alias dps='docker ps'
alias dpsa='docker ps -a'
alias di='docker images'
alias dlog='docker logs -f'
alias dexec='docker exec -it'
alias dstop='docker stop $(docker ps -q)'
alias drm='docker rm $(docker ps -aq)'
alias drmi='docker rmi $(docker images -q)'

# System maintenance
alias dcleanup='docker system prune -af && docker volume prune -f'
alias dcleanbuild='docker builder prune -af'
alias dspace='docker system df'
alias dinfo='docker info'

# Docker Compose shortcuts
alias dc='docker-compose'
alias dcup='docker-compose up -d'
alias dcdown='docker-compose down'
alias dclogs='docker-compose logs -f'

# =============================================================================
# DATABASE FUNCTIONS
# =============================================================================

# PostgreSQL for web development
pg_dev_start() {
    local db_name=${1:-"devdb"}
    local password=${2:-"dev"}
    local port=${3:-"5432"}
    
    if docker ps --format "table {{.Names}}" | grep -q "postgres-dev"; then
        echo "PostgreSQL development container already running"
        return 0
    fi
    
    echo "Starting PostgreSQL development container..."
    docker run -d \
        --name postgres-dev \
        -e POSTGRES_PASSWORD=$password \
        -e POSTGRES_DB=$db_name \
        -p $port:5432 \
        -v postgres_dev_data:/var/lib/postgresql/data \
        --restart unless-stopped \
        postgres:latest
    
    echo "PostgreSQL started: localhost:$port (user: postgres, password: $password, db: $db_name)"
}

pg_dev_stop() {
    docker stop postgres-dev 2>/dev/null && docker rm postgres-dev 2>/dev/null
    echo "PostgreSQL development container stopped"
}

pg_dev_connect() {
    local db_name=${1:-"devdb"}
    docker exec -it postgres-dev psql -U postgres -d $db_name
}

# =============================================================================
# AI/ML FUNCTIONS
# =============================================================================

# Qdrant vector database
qdrant_start() {
    local port=${1:-"6333"}
    
    if docker ps --format "table {{.Names}}" | grep -q "qdrant-dev"; then
        echo "Qdrant development container already running"
        return 0
    fi
    
    echo "Starting Qdrant vector database..."
    docker run -d \
        --name qdrant-dev \
        -p $port:6333 \
        -p $((port+1)):6334 \
        -v qdrant_storage:/qdrant/storage \
        --restart unless-stopped \
        qdrant/qdrant:latest
    
    echo "Qdrant started: localhost:$port (Web UI: localhost:$port/dashboard)"
}

qdrant_stop() {
    docker stop qdrant-dev 2>/dev/null && docker rm qdrant-dev 2>/dev/null
    echo "Qdrant development container stopped"
}

qdrant_backup() {
    local backup_name=${1:-$(date +%Y%m%d_%H%M%S)}
    local backup_dir="./backups"
    
    mkdir -p $backup_dir
    
    if ! docker ps --format "table {{.Names}}" | grep -q "qdrant-dev"; then
        echo "Qdrant container not running"
        return 1
    fi
    
    echo "Creating Qdrant backup: $backup_name"
    docker exec qdrant-dev tar czf "/tmp/qdrant_backup_$backup_name.tar.gz" /qdrant/storage
    docker cp "qdrant-dev:/tmp/qdrant_backup_$backup_name.tar.gz" "$backup_dir/qdrant_backup_$backup_name.tar.gz"
    docker exec qdrant-dev rm "/tmp/qdrant_backup_$backup_name.tar.gz"
    
    echo "Backup saved: $backup_dir/qdrant_backup_$backup_name.tar.gz"
}

# Jupyter Lab with AI/ML libraries
jupyter_start() {
    local port=${1:-"8888"}
    local work_dir=${2:-$(pwd)}
    
    if docker ps --format "table {{.Names}}" | grep -q "jupyter-dev"; then
        echo "Jupyter development container already running"
        return 0
    fi
    
    echo "Starting Jupyter Lab..."
    docker run -d \
        --name jupyter-dev \
        -p $port:8888 \
        -v "$work_dir":/home/jovyan/work \
        -e JUPYTER_ENABLE_LAB=yes \
        --restart unless-stopped \
        jupyter/scipy-notebook:latest
    
    sleep 3
    local token=$(docker logs jupyter-dev 2>&1 | grep "token=" | tail -1 | sed 's/.*token=\([a-z0-9]*\).*/\1/')
    echo "Jupyter Lab started: http://localhost:$port/lab?token=$token"
}

jupyter_stop() {
    docker stop jupyter-dev 2>/dev/null && docker rm jupyter-dev 2>/dev/null
    echo "Jupyter development container stopped"
}

# =============================================================================
# MCP SERVER FUNCTIONS
# =============================================================================

# MCP server launcher
mcp_start() {
    local service=${1:-filesystem}
    local port=${2:-8080}
    
    if ! docker images --format "table {{.Repository}}" | grep -q "mcp/$service"; then
        echo "MCP service '$service' not found. Available services:"
        docker images --format "table {{.Repository}}:{{.Tag}}" | grep "mcp/"
        return 1
    fi
    
    if docker ps --format "table {{.Names}}" | grep -q "mcp-$service"; then
        echo "MCP service '$service' already running"
        return 0
    fi
    
    echo "Starting MCP service: $service"
    docker run -d \
        --name "mcp-$service" \
        -p $port:8080 \
        -v $(pwd):/workspace \
        -w /workspace \
        "mcp/$service:latest"
    
    echo "MCP $service started on port $port"
}

mcp_stop() {
    local service=${1:-"all"}
    
    if [[ "$service" == "all" ]]; then
        docker ps --format "table {{.Names}}" | grep "mcp-" | xargs -I {} docker stop {} 2>/dev/null
        docker ps -a --format "table {{.Names}}" | grep "mcp-" | xargs -I {} docker rm {} 2>/dev/null
        echo "All MCP services stopped"
    else
        docker stop "mcp-$service" 2>/dev/null && docker rm "mcp-$service" 2>/dev/null
        echo "MCP service '$service' stopped"
    fi
}

mcp_list() {
    echo "Available MCP services:"
    docker images --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}" | grep "mcp/"
    echo "\nRunning MCP services:"
    docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep "mcp-"
}

# =============================================================================
# DEVELOPMENT STACK FUNCTIONS
# =============================================================================

# Complete development environment
dev_stack_start() {
    local stack_type=${1:-"web"}
    
    case $stack_type in
        "web")
            echo "Starting web development stack..."
            pg_dev_start
            ;;
        "ai")
            echo "Starting AI/ML development stack..."
            qdrant_start
            jupyter_start
            ;;
        "full")
            echo "Starting full development stack..."
            pg_dev_start
            qdrant_start
            jupyter_start 8889  # Different port to avoid conflicts
            ;;
        *)
            echo "Usage: dev_stack_start [web|ai|full]"
            return 1
            ;;
    esac
    
    echo "Development stack '$stack_type' ready!"
    dev_stack_status
}

dev_stack_stop() {
    echo "Stopping development stack..."
    pg_dev_stop
    qdrant_stop
    jupyter_stop
    mcp_stop all
    echo "Development stack stopped"
}

dev_stack_status() {
    echo "\n=== Development Stack Status ==="
    echo "PostgreSQL: $(docker ps --format "table {{.Status}}" --filter "name=postgres-dev" 2>/dev/null || echo "Not running")"
    echo "Qdrant: $(docker ps --format "table {{.Status}}" --filter "name=qdrant-dev" 2>/dev/null || echo "Not running")"
    echo "Jupyter: $(docker ps --format "table {{.Status}}" --filter "name=jupyter-dev" 2>/dev/null || echo "Not running")"
    
    local mcp_count=$(docker ps --filter "name=mcp-" --format "table {{.Names}}" 2>/dev/null | wc -l)
    echo "MCP Services: $((mcp_count - 1)) running"
    echo "================================\n"
}

# =============================================================================
# PROJECT TEMPLATE FUNCTIONS
# =============================================================================

# Web application project template
create_web_project() {
    local project_name=${1:-"my-web-app"}
    local framework=${2:-"node"}
    
    if [[ -d "$project_name" ]]; then
        echo "Directory '$project_name' already exists"
        return 1
    fi
    
    mkdir -p $project_name
    cd $project_name
    
    cat > docker-compose.yml << EOF
version: '3.8'
services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_PASSWORD: dev
      POSTGRES_DB: ${project_name}_db
      POSTGRES_USER: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  app:
    build: .
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://postgres:dev@postgres:5432/${project_name}_db
      NODE_ENV: development
    volumes:
      - .:/app
      - /app/node_modules

volumes:
  postgres_data:
EOF
    
    # Create basic Dockerfile based on framework
    case $framework in
        "node")
            cat > Dockerfile << EOF
FROM node:18-alpine
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["npm", "run", "dev"]
EOF
            cat > package.json << EOF
{
  "name": "${project_name}",
  "version": "1.0.0",
  "scripts": {
    "dev": "node server.js",
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.18.2",
    "pg": "^8.11.0"
  }
}
EOF
            ;;
        "python")
            cat > Dockerfile << EOF
FROM python:3.12-slim
WORKDIR /app
COPY requirements.txt .
RUN pip install -r requirements.txt
COPY . .
EXPOSE 3000
CMD ["python", "app.py"]
EOF
            cat > requirements.txt << EOF
flask==2.3.3
psycopg2-binary==2.9.7
python-dotenv==1.0.0
EOF
            ;;
    esac
    
    echo "Web project '$project_name' created with PostgreSQL and $framework"
    echo "Run 'docker-compose up' to start the development environment"
}

# AI/ML project template
create_ai_project() {
    local project_name=${1:-"my-ai-project"}
    
    if [[ -d "$project_name" ]]; then
        echo "Directory '$project_name' already exists"
        return 1
    fi
    
    mkdir -p $project_name/{notebooks,data,models,src}
    cd $project_name
    
    cat > docker-compose.yml << EOF
version: '3.8'
services:
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
  
  jupyter:
    image: jupyter/scipy-notebook:latest
    ports:
      - "8888:8888"
    volumes:
      - ./:/home/jovyan/work
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      GRANT_SUDO: "yes"
    user: root
    depends_on:
      qdrant:
        condition: service_healthy

volumes:
  qdrant_storage:
EOF
    
    cat > requirements.txt << EOF
qdrant-client==1.6.4
numpy==1.24.3
pandas==2.0.3
scikit-learn==1.3.0
matplotlib==3.7.2
seaborn==0.12.2
jupyter==1.0.0
openai==0.28.0
langchain==0.0.292
transformers==4.33.2
torch==2.0.1
EOF
    
    cat > notebooks/getting_started.ipynb << EOF
{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": ["# ${project_name} - Getting Started\n\nThis notebook helps you get started with your AI/ML project."]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": ["import numpy as np\nimport pandas as pd\nfrom qdrant_client import QdrantClient\n\n# Connect to Qdrant\nclient = QdrantClient(host='qdrant', port=6333)\nprint('Connected to Qdrant successfully!')"]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
EOF
    
    echo "AI/ML project '$project_name' created with:"
    echo "  - Qdrant vector database"
    echo "  - Jupyter Lab environment"
    echo "  - Pre-configured notebooks"
    echo "  - Common AI/ML dependencies"
    echo ""
    echo "Run 'docker-compose up' to start the development environment"
    echo "Access Jupyter at: http://localhost:8888"
    echo "Access Qdrant dashboard at: http://localhost:6333/dashboard"
}

# =============================================================================
# MLBOX INTEGRATION FUNCTIONS
# =============================================================================

# SSH tunnel to MLbox for Docker services
mlbox_tunnel() {
    local local_port=${1:-8080}
    local remote_port=${2:-8080}
    local service=${3:-"general"}
    
    echo "Creating tunnel: localhost:$local_port -> MLbox:$remote_port"
    echo "Press Ctrl+C to close tunnel"
    ssh -L $local_port:localhost:$remote_port MLbox -N
}

# Deploy container to MLbox
mlbox_deploy() {
    local image_name=${1}
    local container_name=${2:-$(basename $image_name)}
    
    if [[ -z "$image_name" ]]; then
        echo "Usage: mlbox_deploy <image_name> [container_name]"
        return 1
    fi
    
    echo "Saving Docker image..."
    docker save $image_name | gzip > /tmp/${container_name}.tar.gz
    
    echo "Transferring to MLbox..."
    scp /tmp/${container_name}.tar.gz MLbox:/tmp/
    
    echo "Loading image on MLbox..."
    ssh MLbox "gunzip -c /tmp/${container_name}.tar.gz | docker load"
    
    echo "Cleaning up local temp file..."
    rm /tmp/${container_name}.tar.gz
    
    echo "Image '$image_name' deployed to MLbox successfully"
    echo "Connect to MLbox and run: docker run -d --name $container_name $image_name"
}

# =============================================================================
# UTILITY FUNCTIONS
# =============================================================================

# Python development with Docker
py_docker_dev() {
    local python_version=${1:-3.12}
    local port=${2:-8000}
    
    docker run -it --rm \
        -v $(pwd):/app \
        -w /app \
        -p $port:$port \
        python:$python_version-slim \
        bash
}

# Quick database operations
db_backup() {
    local container_name=${1:-postgres-dev}
    local backup_name=${2:-$(date +%Y%m%d_%H%M%S)}
    
    if ! docker ps --format "table {{.Names}}" | grep -q "$container_name"; then
        echo "Container '$container_name' not running"
        return 1
    fi
    
    mkdir -p ./backups
    
    echo "Creating database backup..."
    docker exec $container_name pg_dumpall -U postgres > "./backups/db_backup_$backup_name.sql"
    echo "Backup saved: ./backups/db_backup_$backup_name.sql"
}

# System maintenance
docker_maintenance() {
    echo "Running Docker maintenance..."
    echo "Current disk usage:"
    docker system df
    
    echo "\nCleaning up unused resources..."
    docker system prune -f
    docker volume prune -f
    
    echo "\nOptional: Clean build cache? (y/N)"
    read -r response
    if [[ "$response" =~ ^[Yy]$ ]]; then
        docker builder prune -af
    fi
    
    echo "\nDisk usage after cleanup:"
    docker system df
}

# Show running services overview
docker_overview() {
    echo "=== Docker Overview ==="
    echo "\nRunning containers:"
    docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}\t{{.Ports}}"
    
    echo "\nSystem usage:"
    docker system df
    
    echo "\nActive contexts:"
    docker context ls
    
    echo "\nDocker info:"
    docker info | grep -E "(Server Version|Storage Driver|Cgroup Version|CPUs|Total Memory)"
    echo "======================="
}

# Help function
docker_help() {
    echo "=== Custom Docker Functions ==="
    echo ""
    echo "Database Functions:"
    echo "  pg_dev_start [db_name] [password] [port] - Start PostgreSQL dev container"
    echo "  pg_dev_stop                              - Stop PostgreSQL dev container"
    echo "  pg_dev_connect [db_name]                 - Connect to PostgreSQL"
    echo ""
    echo "AI/ML Functions:"
    echo "  qdrant_start [port]                      - Start Qdrant vector database"
    echo "  qdrant_stop                              - Stop Qdrant container"
    echo "  qdrant_backup [backup_name]              - Backup Qdrant data"
    echo "  jupyter_start [port] [work_dir]          - Start Jupyter Lab"
    echo "  jupyter_stop                             - Stop Jupyter Lab"
    echo ""
    echo "MCP Functions:"
    echo "  mcp_start <service> [port]               - Start MCP service"
    echo "  mcp_stop [service|all]                   - Stop MCP service(s)"
    echo "  mcp_list                                 - List available MCP services"
    echo ""
    echo "Development Stacks:"
    echo "  dev_stack_start [web|ai|full]            - Start development stack"
    echo "  dev_stack_stop                           - Stop all development services"
    echo "  dev_stack_status                         - Show stack status"
    echo ""
    echo "Project Templates:"
    echo "  create_web_project <name> [node|python] - Create web project template"
    echo "  create_ai_project <name>                 - Create AI/ML project template"
    echo ""
    echo "MLbox Integration:"
    echo "  mlbox_tunnel <local_port> <remote_port>  - Create SSH tunnel to MLbox"
    echo "  mlbox_deploy <image> [container_name]    - Deploy image to MLbox"
    echo ""
    echo "Utilities:"
    echo "  py_docker_dev [python_version] [port]    - Python development container"
    echo "  db_backup [container] [backup_name]      - Backup database"
    echo "  docker_maintenance                       - Run system cleanup"
    echo "  docker_overview                          - Show system overview"
    echo "  docker_help                              - Show this help"
    echo ""
    echo "Aliases: dps, dpsa, di, dlog, dexec, dcleanup, dcleanbuild, dspace"
    echo "==============================="
}
