# ==============================================================================
#  Terminal and Display Settings
# ==============================================================================
# Enable true color support for better terminal colors
set-option -sa terminal-overrides ",xterm*:Tc"

# Enable 256 color support for better terminal colors
set -g default-terminal "tmux-256color"

# Enable mouse support for clicking, scrolling, and resizing
set -g mouse on

# Increase command history buffer (default is usually 2000)
set -g history-limit 102400

# Fix ESC delay in vim/nvim (reduces delay when pressing Escape)
set -g escape-time 10

# ==============================================================================
#  Prefix Key Configuration
# ==============================================================================
# Change prefix from default Ctrl-b to Ctrl-Space (more ergonomic)
unbind C-b
set -g prefix C-Space
bind C-Space send-prefix

# ==============================================================================
#  Pane Navigation (Vim-style)
# ==============================================================================
# Vim style pane selection with prefix key
bind h select-pane -L
bind j select-pane -D 
bind k select-pane -U
bind l select-pane -R

# Use Alt-arrow keys without prefix key to switch panes
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

# ==============================================================================
#  Window Navigation and Management
# ==============================================================================
# Start windows and panes at 1, not 0 (more intuitive for keyboard shortcuts)
set -g base-index 1
set -g pane-base-index 1
set-window-option -g pane-base-index 1

# Automatically renumber windows when one is deleted (removes gaps in numbering)
set-option -g renumber-windows on

# Shift arrow to switch windows (no prefix needed)
bind -n S-Left  previous-window
bind -n S-Right next-window

# Shift Alt vim keys to switch windows (no prefix needed)
bind -n M-H previous-window
bind -n M-L next-window

# Create new window in current path instead of home directory
bind c new-window -c '#{pane_current_path}'

# Break current pane into a new window (useful for giving pane more space)
bind b break-pane -d

# ==============================================================================
#  Window Splitting
# ==============================================================================
# Preserve current path when splitting windows (override defaults)
bind '"' split-window -v -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"

# More intuitive split bindings (optional - you can use these instead of above)
# bind '\' split-window -h -c '#{pane_current_path}'  # vertical split
# bind - split-window -v -c '#{pane_current_path}'    # horizontal split

# ==============================================================================
#  Copy Mode Configuration
# ==============================================================================
# Use vim keybindings in copy mode
set-window-option -g mode-keys vi

# Use emacs keybindings in the status line (works better than vi mode here)
set-option -g status-keys emacs

# Copy mode keybindings (vim-style visual selection)
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# ==============================================================================
#  Configuration Management
# ==============================================================================
# Quick config reload - press prefix + r to reload tmux config
# bind r source-file "$HOME/.tmux.conf" \; display "Config 1 reloaded from $HOME/.tmux.conf"

# ==============================================================================
#  Cursor / VSCode Environment Sync Hook
# ==============================================================================
# This hook automates the process of updating the environment for all panes
# when you attach to a tmux session. It works in conjunction with the `tmux`
# wrapper function in ~/.zsh_cursor_functions.
#
# Workflow:
# 1. You run `tmux attach`.
# 2. The Zsh wrapper function saves the latest environment to ~/.cache/cursor_env.zsh.
# 3. Tmux attaches the client.
# 4. This hook fires and broadcasts a `source` command to all existing panes,
#    instantly refreshing their environment.
#
# Exclude the current pane (cleanest solution)
# set-hook -g client-attached 'run-shell "current=$(tmux display-message -p \"#{pane_id}\"); for pane in $(tmux list-panes -s -F #{pane_id}); do [ \"$pane\" != \"$current\" ] && tmux send-keys -t $pane \"source ~/.cache/cursor_env.zsh\" C-m; done"'
# Run silently and ignore errors
# set-hook -g client-attached 'run-shell "for pane in $(tmux list-panes -s -F #{pane_id}); do tmux send-keys -t $pane \"source ~/.cache/cursor_env.zsh 2>/dev/null\" C-m; done"'
# Only send the source command to panes that are running a shell
# set-hook -g client-attached 'run-shell "for pane in $(tmux list-panes -s -F #{pane_id}); do if tmux display-message -t $pane -p \"#{pane_current_command}\" | grep -q \"zsh\\|bash\\|sh\"; then tmux send-keys -t $pane \"source ~/.cache/cursor_env.zsh\" C-m; fi; done"'
# Use while read instead of for - This handles the pane IDs more reliably
set-hook -g client-attached 'run-shell "tmux list-panes -s -F \"#{pane_id}\" | while read pane; do tmux send-keys -t \"$pane\" \"source ~/.cache/cursor_env.zsh\" C-m; done"'

# ==============================================================================
#  Theme and Plugins
# ==============================================================================

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-cpu' 
set -g @plugin 'catppuccin/tmux#v2.1.3'

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'

# Dependencies (plugins that provide data) MUST be listed before the theme
set -g @plugin 'tmux-plugins/tmux-cpu' 

# Main theme plugin (loads AFTER its dependencies)
set -g @plugin 'catppuccin/tmux#v2.1.3'

# Other plugins
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin '2kabhishek/tmux-tilit'

# ==============================================================================
#  Catppuccin Theme Customization
# ==============================================================================
# Set your desired flavor
set -g @catppuccin_flavor 'mocha' # latte, frappe, macchiato, or mocha
set -g @catppuccin_window_status_style "rounded" # basic, rounded, slanted, custom, or none

# Define your status bar modules
set -gF status-right "#{E:@catppuccin_status_directory} #{E:@catppuccin_status_cpu} #{E:@catppuccin_status_session}"

# Set the status bar length and clear the left status
set -g status-right-length 100
set -g status-left-length 100
set -g status-left ""

# Your tmux-cpu formatting (this is correct)
set -g @cpu_usage_format "CPU: %3.1f%% RAM: %3.1f%%"

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

# ==============================================================================
#  CUSTOM KEYBINDING OVERRIDES (PUT THIS AT THE VERY END)
# ==============================================================================
# This binding will now overwrite any defaults set by plugins like tmux-sensible.
bind r source-file "$HOME/.tmux.conf" \; display "Config 2 reloaded!"
